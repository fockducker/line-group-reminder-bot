#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Comprehensive Enhanced Parser Test
‡∏ó‡∏î‡∏™‡∏≠‡∏ö Enhanced Parser ‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢
"""

import sys
import os
import json
from datetime import datetime

# Add utils to path
sys.path.append(os.path.join(os.path.dirname(__file__), 'utils'))

try:
    from enhanced_smart_parser import EnhancedSmartDateTimeParser
    
    def test_comprehensive_cases():
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
        
        parser = EnhancedSmartDateTimeParser()
        
        test_cases = [
            # Original test case
            {
                'input': '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏î ‡∏Å‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏Å‡∏ö‡πà‡∏≤‡∏¢3‡πÇ‡∏°‡∏á',
                'expected': {
                    'title': '‡∏Å‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß',
                    'time': '15.00',
                    'person': '‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏Å'
                }
            },
            
            # Date variations
            {
                'input': '‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ ‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏Ñ‡∏ì‡∏∞‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£ ‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤ 10 ‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤',
                'expected': {
                    'title': '‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏Ñ‡∏ì‡∏∞‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£',
                    'time': '10.00'
                }
            },
            
            # Medical appointment
            {
                'input': '‡∏ï‡∏±‡πâ‡∏á‡∏ô‡∏±‡∏î ‡πÑ‡∏õ‡∏´‡∏≤‡∏´‡∏°‡∏≠‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏®‡∏¥‡∏£‡∏¥‡∏£‡∏≤‡∏ä ‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ 14.30 ‡∏ô.',
                'expected': {
                    'title': '‡πÑ‡∏õ‡∏´‡∏≤‡∏´‡∏°‡∏≠‡∏™‡∏°‡∏ä‡∏≤‡∏¢',
                    'time': '14.30',
                    'location': '‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏®‡∏¥‡∏£‡∏¥‡∏£‡∏≤‡∏ä'
                }
            },
            
            # Time variations
            {
                'input': '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏î ‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏ü‡∏ü‡∏¥‡∏® ‡∏ö‡πà‡∏≤‡∏¢‡∏™‡∏≠‡∏á‡∏Ñ‡∏£‡∏∂‡πà‡∏á',
                'expected': {
                    'title': '‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
                    'time': '14.30',
                    'person': '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
                    'location': '‡∏≠‡∏≠‡∏ü‡∏ü‡∏¥‡∏®'
                }
            },
            
            # Evening time
            {
                'input': '‡∏ô‡∏±‡∏î‡∏Å‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô ‡∏´‡πâ‡∏≤‡∏á‡∏™‡∏¢‡∏≤‡∏°‡∏û‡∏≤‡∏£‡∏≤‡∏Å‡∏≠‡∏ô 6 ‡πÇ‡∏°‡∏á‡πÄ‡∏¢‡πá‡∏ô',
                'expected': {
                    'title': '‡∏Å‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô',
                    'time': '18.00',
                    'person': '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô',
                    'location': '‡∏´‡πâ‡∏≤‡∏á‡∏™‡∏¢‡∏≤‡∏°‡∏û‡∏≤‡∏£‡∏≤‡∏Å‡∏≠‡∏ô'
                }
            },
            
            # Thai numerals
            {
                'input': '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏î ‡∏û‡∏ö‡∏´‡∏°‡∏≠‡πÉ‡∏´‡∏ç‡πà ‡∏£‡∏û.‡∏à‡∏∏‡∏¨‡∏≤ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡πë‡πï ‡πÄ‡∏ß‡∏•‡∏≤ ‡πë‡πî.‡πì‡πê ‡∏ô.',
                'expected': {
                    'title': '‡∏û‡∏ö‡∏´‡∏°‡∏≠‡πÉ‡∏´‡∏ç‡πà',
                    'time': '14.30',
                    'location': '‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏à‡∏∏‡∏¨‡∏≤‡∏•‡∏á‡∏Å‡∏£‡∏ì‡πå'
                }
            },
            
            # Night time (‡∏ó‡∏∏‡πà‡∏°)
            {
                'input': '‡∏ô‡∏±‡∏î‡∏î‡∏π‡∏´‡∏ô‡∏±‡∏á ‡∏™‡∏≤‡∏°‡∏ó‡∏∏‡πà‡∏°‡∏Ñ‡∏£‡∏∂‡πà‡∏á ‡∏´‡πâ‡∏≤‡∏á‡πÄ‡∏ã‡πá‡∏ô‡∏ó‡∏£‡∏±‡∏•',
                'expected': {
                    'title': '‡∏î‡∏π‡∏´‡∏ô‡∏±‡∏á',
                    'time': '21.30',
                    'location': '‡∏´‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏ã‡πá‡∏ô‡∏ó‡∏£‡∏±‡∏•'
                }
            }
        ]
        
        print("üß™ Comprehensive Enhanced Parser Test")
        print("=" * 70)
        
        for i, test_case in enumerate(test_cases, 1):
            print(f"\nüìù Test Case {i}: {test_case['input']}")
            print("-" * 50)
            
            try:
                result = parser.extract_appointment_info(test_case['input'])
                
                # Display results
                print("üìä Results:")
                actual_results = {
                    'title': result.get('appointment_title', ''),
                    'date': result.get('date', ''),
                    'time': result.get('time', ''),
                    'location': result.get('location', ''),
                    'person': result.get('contact_person', ''),
                    'phone': result.get('phone_number', ''),
                    'confidence': result.get('confidence', 0)
                }
                
                for key, value in actual_results.items():
                    if value:
                        print(f"  {key}: '{value}'")
                
                # Check expectations
                expected = test_case['expected']
                print("\n‚úÖ Validation:")
                
                all_passed = True
                for exp_key, exp_value in expected.items():
                    actual_value = actual_results.get(exp_key, '')
                    
                    if exp_key == 'title':
                        # For title, check if expected is contained in actual
                        passed = exp_value.lower() in actual_value.lower() if actual_value else False
                    else:
                        passed = exp_value == actual_value
                    
                    status = "‚úÖ" if passed else "‚ùå"
                    print(f"  {status} {exp_key}: expected '{exp_value}', got '{actual_value}'")
                    
                    if not passed:
                        all_passed = False
                
                print(f"\nüéØ Overall: {'‚úÖ PASS' if all_passed else '‚ùå FAIL'}")
                
            except Exception as e:
                print(f"‚ùå Error: {e}")
                import traceback
                traceback.print_exc()
        
        print("\n" + "=" * 70)
        print("‚úÖ Test completed!")
    
    def test_edge_cases():
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö edge cases"""
        
        parser = EnhancedSmartDateTimeParser()
        
        edge_cases = [
            "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏î",  # No details
            "‡∏Å‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß",   # No time
            "‡∏ö‡πà‡∏≤‡∏¢ 3 ‡πÇ‡∏°‡∏á", # Time only
            "‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ",   # Date only
            "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏î ‡∏Å‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß ‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ ‡πí‡πì.‡πï‡πô ‡∏ô.",  # Late night
            "‡∏ô‡∏±‡∏î DMK ‡∏™‡∏ô‡∏≤‡∏°‡∏ö‡∏¥‡∏ô ‡πÄ‡∏ä‡πâ‡∏≤",  # Airport abbreviation
        ]
        
        print("\nüîß Edge Cases Test")
        print("=" * 40)
        
        for i, test_input in enumerate(edge_cases, 1):
            print(f"\n{i}. Input: '{test_input}'")
            
            try:
                result = parser.extract_appointment_info(test_input)
                confidence = result.get('confidence', 0)
                print(f"   Confidence: {confidence:.2f}")
                
                # Show non-empty fields
                for field in ['appointment_title', 'date', 'time', 'location', 'contact_person']:
                    value = result.get(field, '')
                    if value:
                        print(f"   {field}: '{value}'")
                        
            except Exception as e:
                print(f"   Error: {e}")
    
    if __name__ == "__main__":
        test_comprehensive_cases()
        test_edge_cases()
        
        print(f"\nüí° To test GUI: run 'python simple_gui.py'")
        
except ImportError as e:
    print(f"‚ùå Cannot import Enhanced Parser: {e}")
    print("Make sure enhanced_smart_parser.py is in utils/ directory")
except Exception as e:
    print(f"‚ùå Error: {e}")
    import traceback
    traceback.print_exc()

input("\nPress Enter to exit...")