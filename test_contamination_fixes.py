#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Test the improved extraction to fix contamination issues
"""

import sys
import os

# Add the parent directory to Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from utils.enhanced_smart_parser import EnhancedSmartDateTimeParser

def test_contamination_fixes():
    parser = EnhancedSmartDateTimeParser()
    
    # Test case from user's image (reconstructed from what we can see)
    test_text = "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏î ‡∏Å‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏£‡∏±‡∏ê‡∏≠‡∏ô‡∏∏‡∏£‡∏£‡∏≤‡∏©‡∏°‡∏±‡∏¢‡∏ó‡∏µ‡πà‡πÇ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏Ñ‡∏≠‡∏ô‡∏¢‡∏≤‡∏°‡∏Å‡∏±‡∏ö‡∏ô‡πâ‡∏≠‡∏á‡∏ö‡∏µ"
    
    print(f"üß™ Testing Contamination Fixes")
    print("=" * 70)
    print(f"Input: {test_text}")
    print("-" * 70)
    
    result = parser.extract_appointment_info(test_text)
    
    print("üìä Results:")
    print(f"  ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢: '{result.get('appointment_title')}'")
    print(f"  ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: '{result.get('date')}'")
    print(f"  ‡πÄ‡∏ß‡∏•‡∏≤: '{result.get('time')}'")
    print(f"  ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: '{result.get('location')}'")
    print(f"  ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£/‡πÅ‡∏ú‡∏ô‡∏Å: '{result.get('building_dept')}'")
    print(f"  ‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠: '{result.get('contact_person')}'")
    print(f"  Confidence: '{result.get('confidence')}'")
    
    print("\nüìù Analysis:")
    
    # Check for contamination issues
    location = result.get('location', '')
    contact = result.get('contact_person', '')
    
    # Check if location contains person names
    location_has_person = any(word in location for word in ['‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô', '‡∏ô‡πâ‡∏≠‡∏á', '‡∏Å‡∏±‡∏ö'])
    
    # Check if person contains location words  
    person_has_location = any(word in contact for word in ['‡∏£‡πâ‡∏≤‡∏ô', '‡∏ó‡∏µ‡πà', '‡∏´‡πâ‡∏≤‡∏á'])
    
    # Check if location contains time
    location_has_time = any(word in location for word in ['‡πÇ‡∏°‡∏á', '‡∏ö‡πà‡∏≤‡∏¢', '‡πÄ‡∏ä‡πâ‡∏≤', '‡πÄ‡∏¢‡πá‡∏ô'])
    
    # Check if person contains time
    person_has_time = any(word in contact for word in ['‡πÇ‡∏°‡∏á', '‡∏ö‡πà‡∏≤‡∏¢', '‡πÄ‡∏ä‡πâ‡∏≤', '‡πÄ‡∏¢‡πá‡∏ô'])
    
    print(f"  ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô: {'‚ùå' if location_has_person else '‚úÖ'}")
    print(f"  ‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {'‚ùå' if person_has_location else '‚úÖ'}")
    print(f"  ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤: {'‚ùå' if location_has_time else '‚úÖ'}")
    print(f"  ‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤: {'‚ùå' if person_has_time else '‚úÖ'}")
    
    # Additional test cases
    additional_tests = [
        "‡∏ô‡∏±‡∏î‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡πÅ‡∏ü 3‡πÇ‡∏°‡∏á‡∏ö‡πà‡∏≤‡∏¢",
        "‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£A‡∏ä‡∏±‡πâ‡∏ô2 ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤",
        "‡∏Å‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏´‡πâ‡∏≤‡∏á‡πÄ‡∏ã‡πá‡∏ô‡∏ó‡∏£‡∏±‡∏• 6‡πÇ‡∏°‡∏á‡πÄ‡∏¢‡πá‡∏ô",
    ]
    
    print(f"\nüîÑ Additional Tests:")
    print("-" * 50)
    
    for i, test in enumerate(additional_tests, 1):
        print(f"\n{i}. Input: {test}")
        result = parser.extract_appointment_info(test)
        print(f"   ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: '{result.get('location')}'")
        print(f"   ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£/‡πÅ‡∏ú‡∏ô‡∏Å: '{result.get('building_dept')}'")
        print(f"   ‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠: '{result.get('contact_person')}'")
        print(f"   ‡πÄ‡∏ß‡∏•‡∏≤: '{result.get('time')}'")

if __name__ == "__main__":
    test_contamination_fixes()
    input("\nPress Enter to exit...")