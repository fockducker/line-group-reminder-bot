#!/usr/bin/env python3
"""
Test Notification System
‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö manual
‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á personal ‡πÅ‡∏•‡∏∞ group chat
"""

import os
import sys
import logging
from datetime import datetime, timedelta
import pytz

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ import modules ‡πÑ‡∏î‡πâ
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from linebot.v3.messaging import MessagingApi, Configuration, ApiClient, PushMessageRequest, TextMessage
from notifications.notification_service import NotificationService
from storage.sheets_repo import SheetsRepository
from storage.models import Appointment

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Bangkok timezone
BANGKOK_TZ = pytz.timezone('Asia/Bangkok')

def setup_line_bot():
    """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE Bot API"""
    try:
        channel_access_token = os.getenv('LINE_CHANNEL_ACCESS_TOKEN')
        if not channel_access_token:
            raise ValueError("LINE_CHANNEL_ACCESS_TOKEN not found in environment variables")
        
        configuration = Configuration(access_token=channel_access_token)
        api_client = ApiClient(configuration)
        line_bot_api = MessagingApi(api_client)
        
        logger.info("LINE Bot API initialized successfully")
        return line_bot_api
        
    except Exception as e:
        logger.error(f"Failed to setup LINE Bot API: {e}")
        return None

def create_test_appointments():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    now = datetime.now(BANGKOK_TZ)
    
    # ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡πÉ‡∏™‡πà User ID ‡πÅ‡∏•‡∏∞ Group ID ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
    test_appointments = [
        {
            'id': 'test001',
            'group_id': 'Uee05f17b8ca24a2927accb9568263892',  # Personal - User ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
            'note': '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Personal Chat',
            'datetime': now + timedelta(days=1),  # ‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ
            'hospital': '‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö Personal',
            'department': '‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏î‡∏™‡∏≠‡∏ö Personal',
            'doctor': '‡∏´‡∏°‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö Personal'
        },
        {
            'id': 'test002', 
            'group_id': 'C347ae7c1f88b6c899bd5a3188b8d03b1',  # Group - Group ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
            'note': '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Group Chat',
            'datetime': now,  # ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
            'hospital': '‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö Group',
            'department': '‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏î‡∏™‡∏≠‡∏ö Group',
            'doctor': '‡∏´‡∏°‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö Group'
        }
    ]
    
    appointments = []
    for apt_data in test_appointments:
        appointment = Appointment(
            id=apt_data['id'],
            group_id=apt_data['group_id'],
            datetime_iso=apt_data['datetime'].isoformat(),
            hospital=apt_data['hospital'],
            department=apt_data['department'],
            doctor=apt_data['doctor'],
            note=apt_data['note'],
            location="‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö 123",
            lead_days=[7, 3, 1],
            notified_flags=[False, False, False],
            created_at=now.isoformat(),
            updated_at=now.isoformat()
        )
        appointments.append(appointment)
    
    logger.info(f"Created {len(appointments)} test appointments")
    return appointments

def test_daily_notifications(notification_service, test_appointments):
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô"""
    logger.info("üß™ Testing daily notifications...")
    
    try:
        current_time = datetime.now(BANGKOK_TZ)
        
        for i, appointment in enumerate(test_appointments, 1):
            logger.info(f"üì§ Sending test notification {i}/{len(test_appointments)} for {appointment.note}")
            
            # ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö
            notification_service._send_daily_notification(appointment, current_time)
            
            # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á
            import time
            time.sleep(1)
        
        logger.info("‚úÖ Daily notification test completed")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Daily notification test failed: {e}")
        return False

def test_individual_notifications(line_bot_api, test_appointments):
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏¢‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"""
    logger.info("üß™ Testing individual notifications...")
    
    try:
        for i, appointment in enumerate(test_appointments, 1):
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö
            context_type = "Personal" if not appointment.group_id.startswith('C') else "Group"
            
            message = f"""üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ({context_type})

üìã ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô #{i}
üè• {appointment.note}
üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {appointment.appointment_datetime.strftime('%d/%m/%Y %H:%M')}
üè¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {appointment.hospital}
üîñ ‡πÅ‡∏ú‡∏ô‡∏Å: {appointment.department}
üë®‚Äç‚öïÔ∏è ‡πÅ‡∏û‡∏ó‡∏¢‡πå: {appointment.doctor}
üÜî ‡∏£‡∏´‡∏±‡∏™: {appointment.id}

‚úÖ ‡∏´‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥!

‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {datetime.now(BANGKOK_TZ).strftime('%d/%m/%Y %H:%M:%S')}"""
            
            # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            line_bot_api.push_message(
                PushMessageRequest(
                    to=appointment.group_id,
                    messages=[TextMessage(text=message)]
                )
            )
            
            logger.info(f"‚úÖ Sent test message {i} to {context_type}: {appointment.group_id}")
            
            # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà
            import time
            time.sleep(2)
        
        logger.info("‚úÖ Individual notification test completed")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Individual notification test failed: {e}")
        return False

def test_notification_service_integration(notification_service):
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á NotificationService ‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°"""
    logger.info("üß™ Testing NotificationService integration...")
    
    try:
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
        appointments = notification_service._get_all_appointments()
        logger.info(f"üìã Found {len(appointments)} real appointments in system")
        
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        if appointments:
            # ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏£‡∏Å
            first_appointment = appointments[0]
            logger.info(f"üì§ Testing with real appointment: {first_appointment.note}")
            
            current_time = datetime.now(BANGKOK_TZ)
            notification_service._send_daily_notification(first_appointment, current_time)
            
            logger.info("‚úÖ Real appointment notification sent")
        else:
            logger.info("‚ÑπÔ∏è No real appointments found, skipping real data test")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå NotificationService integration test failed: {e}")
        return False

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    print("üöÄ Starting Notification System Test...")
    print("=" * 50)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö environment variables
    required_vars = ['LINE_CHANNEL_ACCESS_TOKEN', 'GOOGLE_CREDENTIALS_JSON', 'GOOGLE_SPREADSHEET_ID']
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        logger.error(f"‚ùå Missing environment variables: {missing_vars}")
        print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ environment variables ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô")
        return False
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE Bot
    line_bot_api = setup_line_bot()
    if not line_bot_api:
        print("‚ùå Failed to setup LINE Bot API")
        return False
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á NotificationService
    try:
        notification_service = NotificationService(line_bot_api)
        logger.info("‚úÖ NotificationService created successfully")
    except Exception as e:
        logger.error(f"‚ùå Failed to create NotificationService: {e}")
        return False
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    test_appointments = create_test_appointments()
    
    print("\nüìã Test Plan:")
    print("1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏¢‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    print("2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
    print("3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô Google Sheets")
    print()
    
    # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°
    input("‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö...")
    
    results = []
    
    # Test 1: Individual notifications
    print("\nüß™ Test 1: Individual Notifications")
    result1 = test_individual_notifications(line_bot_api, test_appointments)
    results.append(("Individual Notifications", result1))
    
    print("\n‚è≥ ‡∏£‡∏≠ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
    import time
    time.sleep(5)
    
    # Test 2: Daily notifications
    print("\nüß™ Test 2: Daily Notifications")
    result2 = test_daily_notifications(notification_service, test_appointments)
    results.append(("Daily Notifications", result2))
    
    print("\n‚è≥ ‡∏£‡∏≠ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
    time.sleep(5)
    
    # Test 3: Real data integration
    print("\nüß™ Test 3: Real Data Integration")
    result3 = test_notification_service_integration(notification_service)
    results.append(("Real Data Integration", result3))
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    print("\n" + "=" * 50)
    print("üìä Test Results Summary:")
    print("=" * 50)
    
    all_passed = True
    for test_name, result in results:
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        print(f"{test_name}: {status}")
        if not result:
            all_passed = False
    
    print("=" * 50)
    if all_passed:
        print("üéâ All tests PASSED! Notification system is working correctly!")
    else:
        print("‚ö†Ô∏è  Some tests FAILED. Please check the logs above.")
    
    return all_passed

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)