"""
Notification System for LINE Group Reminder Bot
‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
"""

import logging
import pytz
from datetime import datetime, timedelta
from typing import List, Dict, Any
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
from linebot.v3.messaging import MessagingApi, PushMessageRequest, TextMessage

from storage.sheets_repo import SheetsRepository
from storage.models import Appointment

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ timezone ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢
BANGKOK_TZ = pytz.timezone('Asia/Bangkok')


class NotificationService:
    """
    Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
    ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ 7 ‡∏ß‡∏±‡∏ô ‡πÅ‡∏•‡∏∞ 1 ‡∏ß‡∏±‡∏ô
    """
    
    def __init__(self, line_bot_api: MessagingApi):
        """
        Initialize NotificationService
        
        Args:
            line_bot_api (MessagingApi): LINE Bot API instance
        """
        self.line_bot_api = line_bot_api
        self.scheduler = BackgroundScheduler(timezone=BANGKOK_TZ)
        self.sheets_repo = SheetsRepository()
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ scheduler ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 09:00
        self.scheduler.add_job(
            func=self.check_and_send_notifications,
            trigger=CronTrigger(hour=9, minute=0, timezone=BANGKOK_TZ),
            id='daily_notification_check',
            name='Daily Notification Check',
            replace_existing=True
        )
        
        logger.info("NotificationService initialized with daily scheduler at 09:00 Bangkok time")
    
    def start_scheduler(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô background scheduler"""
        try:
            if not self.scheduler.running:
                self.scheduler.start()
                logger.info("Notification scheduler started successfully")
            else:
                logger.info("Notification scheduler is already running")
        except Exception as e:
            logger.error(f"Failed to start notification scheduler: {e}")
    
    def stop_scheduler(self):
        """‡∏´‡∏¢‡∏∏‡∏î background scheduler"""
        try:
            if self.scheduler.running:
                self.scheduler.shutdown()
                logger.info("Notification scheduler stopped")
        except Exception as e:
            logger.error(f"Failed to stop notification scheduler: {e}")
    
    def check_and_send_notifications(self):
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 09:00
        ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô
        """
        logger.info("Starting daily notification check...")
        
        try:
            # ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Google Sheets
            all_appointments = self._get_all_appointments()
            
            if not all_appointments:
                logger.info("No appointments found for notification")
                return
            
            notifications_sent = 0
            now = datetime.now(BANGKOK_TZ)
            
            for appointment in all_appointments:
                try:
                    # ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô
                    self._send_daily_notification(appointment, now)
                    notifications_sent += 1
                    
                except Exception as e:
                    logger.error(f"Error sending notification for appointment {appointment.id}: {e}")
            
            logger.info(f"Daily notification check completed. Sent {notifications_sent} notifications")
            
        except Exception as e:
            logger.error(f"Error in daily notification check: {e}", exc_info=True)
    
    def _get_all_appointments(self) -> List[Appointment]:
        """‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Google Sheets"""
        try:
            all_appointments = []
            
            # ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ Personal
            try:
                personal_appointments = self.sheets_repo.get_appointments("", "personal")
                all_appointments.extend(personal_appointments)
                logger.info(f"Retrieved {len(personal_appointments)} personal appointments")
            except Exception as e:
                logger.error(f"Error retrieving personal appointments: {e}")
            
            # TODO: ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ Group - ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏´‡∏≤ group_id ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            # ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£ list ‡∏ó‡∏∏‡∏Å group ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
            # ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö list ‡∏Ç‡∏≠‡∏á active groups ‡∏´‡∏£‡∏∑‡∏≠ scan worksheets
            
            logger.info(f"Retrieved total {len(all_appointments)} appointments for notification check")
            return all_appointments
            
        except Exception as e:
            logger.error(f"Error retrieving appointments: {e}")
            return []
    
    def _should_notify_7_days(self, appointment_date: datetime, seven_days_later: datetime, appointment: Appointment) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô 7 ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏∞‡∏ñ‡∏∂‡∏á‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å 7 ‡∏ß‡∏±‡∏ô (¬±6 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
        date_diff = abs((appointment_date.date() - seven_days_later.date()).days)
        
        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô 7 ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô
        not_notified_7_days = True
        if len(appointment.notified_flags) >= 1:
            not_notified_7_days = not appointment.notified_flags[0]  # index 0 = 7 days
        
        return date_diff == 0 and not_notified_7_days
    
    def _should_notify_1_day(self, appointment_date: datetime, one_day_later: datetime, appointment: Appointment) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô 1 ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏∞‡∏ñ‡∏∂‡∏á‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ
        date_diff = abs((appointment_date.date() - one_day_later.date()).days)
        
        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô 1 ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô
        not_notified_1_day = True
        if len(appointment.notified_flags) >= 2:
            not_notified_1_day = not appointment.notified_flags[1]  # index 1 = 1 day
        
        return date_diff == 0 and not_notified_1_day
    
    def _send_daily_notification(self, appointment: Appointment, current_time: datetime):
        """‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢"""
        try:
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
            appointment_date = appointment.appointment_datetime
            if appointment_date.tzinfo is None:
                appointment_date = appointment_date.replace(tzinfo=BANGKOK_TZ)
            
            days_diff = (appointment_date.date() - current_time.date()).days
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
            if days_diff < 0:
                # ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
                status_msg = f"‚è∞ ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß {abs(days_diff)} ‡∏ß‡∏±‡∏ô"
                status_emoji = "‚ö™"
            elif days_diff == 0:
                # ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
                status_msg = "üî• ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ!"
                status_emoji = "üî•"
            elif days_diff == 1:
                # ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ
                status_msg = "‚ö° ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ!"
                status_emoji = "‚ö°"
            elif days_diff <= 7:
                # ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ
                status_msg = f"üî¥ ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å {days_diff} ‡∏ß‡∏±‡∏ô"
                status_emoji = "üî¥"
            else:
                # ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
                status_msg = f"üü° ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å {days_diff} ‡∏ß‡∏±‡∏ô"
                status_emoji = "üü°"
            
            message = f"""üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô

{status_emoji} {status_msg}

üè• {appointment.note}
üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {appointment_date.strftime('%d/%m/%Y %H:%M')}
üè¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {appointment.hospital}
üîñ ‡πÅ‡∏ú‡∏ô‡∏Å: {appointment.department}"""
            
            if hasattr(appointment, 'doctor') and appointment.doctor:
                message += f"\nüë®‚Äç‚öïÔ∏è ‡πÅ‡∏û‡∏ó‡∏¢‡πå: {appointment.doctor}"
            
            message += f"\nüÜî ‡∏£‡∏´‡∏±‡∏™: {appointment.id}"
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô
            if days_diff == 0:
                message += "\n\n‚úÖ ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡πÑ‡∏õ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ!"
            elif days_diff == 1:
                message += "\n\nüìù ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ‡πÅ‡∏•‡∏∞‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏ó‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"
            elif days_diff > 0 and days_diff <= 7:
                message += f"\n\n‚è∞ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å {days_diff} ‡∏ß‡∏±‡∏ô ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß"
            
            # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            self.line_bot_api.push_message(
                PushMessageRequest(
                    to=appointment.group_id,
                    messages=[TextMessage(text=message)]
                )
            )
            
            logger.info(f"Sent daily notification for appointment {appointment.id} to {appointment.group_id} (days_diff: {days_diff})")
            
        except Exception as e:
            logger.error(f"Failed to send daily notification for appointment {appointment.id}: {e}")

    def _send_7_day_notification(self, appointment: Appointment):
        """‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô 7 ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô"""
        try:
            message = f"""üóìÔ∏è ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤

üìÖ ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å 1 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
üè• {appointment.note}

‚è∞ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {appointment.appointment_datetime.strftime('%d/%m/%Y %H:%M')}
üè¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {appointment.hospital}
üîñ ‡πÅ‡∏ú‡∏ô‡∏Å: {appointment.department}

üí° ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ô‡∏∞‡∏Ñ‡∏∞"""
            
            # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            self.line_bot_api.push_message(
                PushMessageRequest(
                    to=appointment.group_id,  # ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ user ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
                    messages=[TextMessage(text=message)]
                )
            )
            
            logger.info(f"Sent 7-day notification for appointment {appointment.id} to user {appointment.group_id}")
            
        except Exception as e:
            logger.error(f"Failed to send 7-day notification for appointment {appointment.id}: {e}")
    
    def _send_1_day_notification(self, appointment: Appointment):
        """‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô 1 ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô"""
        try:
            message = f"""‚è∞ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢!

üö® ‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
üè• {appointment.note}

üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {appointment.appointment_datetime.strftime('%d/%m/%Y %H:%M')}
üè¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {appointment.hospital}
üîñ ‡πÅ‡∏ú‡∏ô‡∏Å: {appointment.department}
üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {appointment.location}

‚úÖ ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
‚úÖ ‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏ó‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤
‚úÖ ‡πÇ‡∏ó‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô"""
            
            # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            self.line_bot_api.push_message(
                PushMessageRequest(
                    to=appointment.group_id,  # ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ user ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
                    messages=[TextMessage(text=message)]
                )
            )
            
            logger.info(f"Sent 1-day notification for appointment {appointment.id} to user {appointment.group_id}")
            
        except Exception as e:
            logger.error(f"Failed to send 1-day notification for appointment {appointment.id}: {e}")
    
    def _mark_notification_sent(self, appointment: Appointment, days_before: int):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô Google Sheets"""
        try:
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î context ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö update
            if appointment.group_id.startswith('C'):  # Group ID
                context = f"group_{appointment.group_id}"
            else:  # Personal (User ID)
                context = "personal"
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï notified_flags
            updated_flags = appointment.notified_flags.copy() if appointment.notified_flags else [False, False, False]
            
            # ‡∏ï‡∏≤‡∏° lead_days [7, 3, 1] ‡πÇ‡∏î‡∏¢ 7=index 0, 3=index 1, 1=index 2
            if days_before == 7 and len(updated_flags) >= 1:
                updated_flags[0] = True  # 7 ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô
            elif days_before == 3 and len(updated_flags) >= 2:
                updated_flags[1] = True  # 3 ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô  
            elif days_before == 1 and len(updated_flags) >= 3:
                updated_flags[2] = True  # 1 ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô Google Sheets
            update_data = {
                'notified_flags': str(updated_flags)  # Convert to string for Sheets
            }
            
            success = self.sheets_repo.update_appointment(appointment.id, context, update_data)
            
            if success:
                logger.info(f"Marked {days_before}-day notification as sent for appointment {appointment.id}")
            else:
                logger.error(f"Failed to mark {days_before}-day notification as sent for appointment {appointment.id}")
            
        except Exception as e:
            logger.error(f"Failed to mark notification as sent: {e}")
    
    def send_test_notification(self, user_id: str, message: str = None):
        """‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debugging)"""
        try:
            test_message = message or f"""üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô

‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥
‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {datetime.now(BANGKOK_TZ).strftime('%d/%m/%Y %H:%M:%S')}

üìã ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:
‚Ä¢ üóìÔ∏è 7 ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ (09:00 ‡∏ô.)
‚Ä¢ ‚è∞ 1 ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ (09:00 ‡∏ô.)"""
            
            self.line_bot_api.push_message(
                PushMessageRequest(
                    to=user_id,
                    messages=[TextMessage(text=test_message)]
                )
            )
            
            logger.info(f"Sent test notification to user {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"Failed to send test notification to user {user_id}: {e}")
            return False