"""
Event handlers module for LINE Group Reminder Bot
‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ event handlers ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å LINE
"""

import logging
import uuid
from datetime import datetime, timedelta
from linebot.v3.messaging import ReplyMessageRequest, TextMessage
from linebot.v3.webhooks import MessageEvent, TextMessageContent

from storage.models import Appointment

# Conditional import ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SheetsRepository
try:
    from storage.sheets_repo import SheetsRepository
    SHEETS_AVAILABLE = True
except ImportError as e:
    print(f"Warning: SheetsRepository not available: {e}")
    SHEETS_AVAILABLE = False
    
    class DummySheetsRepository:
        def __init__(self):
            pass
        def add_appointment(self, appointment):
            return False
        def get_appointments(self, group_id, context):
            return []
        def delete_appointment(self, appointment_id, context):
            return False
        def update_appointment(self, appointment_id, context, fields):
            return False
    
    SheetsRepository = DummySheetsRepository

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def register_handlers(handler, line_bot_api):
    """
    ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô event handlers ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE Bot
    
    Args:
        handler: WebhookHandler instance
        line_bot_api: MessagingApi instance
    """
    logger.info("Registering LINE event handlers...")
    
    @handler.add(MessageEvent, message=TextMessageContent)
    def handle_text_message(event):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤"""
        user_message = event.message.text
        user_id = event.source.user_id
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö context: 1:1 chat ‡∏´‡∏£‡∏∑‡∏≠ group chat
        if hasattr(event.source, 'group_id'):
            # Group Chat - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô
            context_type = "group"
            context_id = event.source.group_id
            logger.info(f"Group message from {user_id} in group {context_id}: {user_message}")
        else:
            # 1:1 Chat - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
            context_type = "personal" 
            context_id = user_id
            logger.info(f"Personal message from {user_id}: {user_message}")
        
        # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á ‡πÜ
        message_lower = user_message.lower().strip()
        
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ö‡∏≠‡∏ó‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if context_type == "group":
            # ‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
            if not message_lower.startswith(('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏î', '‡∏î‡∏π‡∏ô‡∏±‡∏î', '‡∏•‡∏ö‡∏ô‡∏±‡∏î', '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ô‡∏±‡∏î', '‡πÅ‡∏Å‡πâ‡∏ô‡∏±‡∏î', '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ô‡∏±‡∏î', '‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î', '‡∏ô‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà', '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î', '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î',
                                           'hello', '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ', '‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢', 'help', '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', '‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', '‡∏ó‡∏î‡∏™‡∏≠‡∏ö')):
                # ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏≠‡∏ó ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°
                return
            
            # ‡∏•‡∏ö mention ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
            if message_lower.startswith('@'):
                space_index = user_message.find(' ')
                if space_index > 0:
                    user_message = user_message[space_index + 1:].strip()
                    message_lower = user_message.lower().strip()
                else:
                    # ‡∏ñ‡πâ‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏Ñ‡πà mention ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
                    message_lower = "help"
        
        # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢
        if message_lower in ['hello', '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ', '‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢']:
            if context_type == "group":
                reply_message = '''‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà LINE Group Reminder Bot
‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô

‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'''
            else:
                reply_message = '''‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà LINE Group Reminder Bot
‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'''
        
        # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (Thai language commands)
        elif message_lower in ['help', '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á', '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠', '‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ']:
            base_help = '''üìã ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢:

‚Ä¢ "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏î" - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà
‚Ä¢ "‡∏î‡∏π‡∏ô‡∏±‡∏î" - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
‚Ä¢ "‡∏•‡∏ö‡∏ô‡∏±‡∏î [‡∏£‡∏´‡∏±‡∏™]" - ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
‚Ä¢ "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ô‡∏±‡∏î [‡∏£‡∏´‡∏±‡∏™]" - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
‚Ä¢ "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" - ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó
‚Ä¢ "‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô" - ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô

üìù ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏î:
‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà 1 (Structured):
‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢: "‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏ü‡∏±‡∏ô"
‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤: "8 ‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏° 2025 14:00"
‡πÅ‡∏û‡∏ó‡∏¢‡πå: "‡∏ó‡∏û‡∏ç. ‡∏õ‡∏≤‡∏£‡∏±‡∏ä"
‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•: "‡∏®‡∏¥‡∏£‡∏¥‡∏£‡∏≤‡∏ä"
‡πÅ‡∏ú‡∏ô‡∏Å: "‡∏ó‡∏±‡∏ô‡∏ï‡∏Å‡∏£‡∏£‡∏°"

‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà 2 (Natural):
‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏î ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 8 ‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏° 2025 ‡πÄ‡∏ß‡∏•‡∏≤ 14:00 ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• ‡∏®‡∏¥‡∏£‡∏¥‡∏£‡∏≤‡∏ä ‡πÅ‡∏ú‡∏ô‡∏Å ‡∏ó‡∏±‡∏ô‡∏ï‡∏Å‡∏£‡∏£‡∏° ‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏ü‡∏±‡∏ô ‡∏û‡∏ö ‡∏ó‡∏û‡∏ç. ‡∏õ‡∏≤‡∏£‡∏±‡∏ä

üóëÔ∏è ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢:
‡∏•‡∏ö‡∏ô‡∏±‡∏î ABC123

üîÑ ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢:
‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ô‡∏±‡∏î ABC123 ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢:"‡∏ï‡∏£‡∏ß‡∏à‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢"

‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ô‡∏±‡∏î ABC123
‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢:"‡∏ï‡∏£‡∏ß‡∏à‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢"
‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤:"10 ‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏° 2025 15:00"
‡πÅ‡∏û‡∏ó‡∏¢‡πå:"‡∏î‡∏£.‡∏™‡∏°‡∏ä‡∏≤‡∏¢"'''
            
            if context_type == "group":
                reply_message = base_help + '\n\nüè• ‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°: ‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏´‡πá‡∏ô'
            else:
                reply_message = base_help + '\n\nüë§ ‡πÇ‡∏´‡∏°‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß: ‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
        
        # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô)
        elif message_lower.startswith(('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏î', '‡∏ô‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà', '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î')):
            reply_message = handle_add_appointment_command(user_message, user_id, context_type, context_id)
        
        # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
        elif message_lower in ['‡∏î‡∏π‡∏ô‡∏±‡∏î', '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î', '‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢', '‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î']:
            reply_message = handle_list_appointments_command(user_id, context_type, context_id)
        
        # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô)
        elif message_lower.startswith(('‡∏•‡∏ö‡∏ô‡∏±‡∏î', '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ô‡∏±‡∏î', '‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î')):
            reply_message = handle_delete_appointment_command(user_message, user_id, context_type, context_id)
        
        # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô)
        elif message_lower.startswith(('‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ô‡∏±‡∏î', '‡πÅ‡∏Å‡πâ‡∏ô‡∏±‡∏î', '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î')):
            reply_message = handle_edit_appointment_command(user_message, user_id, context_type, context_id)
                
        # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        elif message_lower in ['reminder', '‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', '‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô']:
            reply_message = handle_reminder_info_command(context_type)
        
        elif message_lower in ['‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', 'test notification', 'testnotification']:
            reply_message = handle_test_notification_command(user_id)
        
        elif message_lower in ['‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', 'test date', 'testdate']:
            reply_message = handle_test_date_parser_command()
        
        elif message_lower in ['force check', 'forcecheck', '‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', '‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ']:
            reply_message = handle_force_notification_check_command()
                
        elif message_lower == 'status':
            reply_message = f'‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó:\\n‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ LINE API ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\\n‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥\\n‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥\\n‡∏£‡∏∞‡∏ö‡∏ö Scheduler ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\\nContext: {context_type} ({context_id[:10]}...)'
        else:
            reply_message = f'‡∏Ñ‡∏∏‡∏ì‡∏û‡∏¥‡∏°‡∏û‡πå: "{user_message}"\\n\\n‡∏û‡∏¥‡∏°‡∏û‡πå "help" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ\\nContext: {context_type.title()}'
        
        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
        try:
            import time
            reply_start = time.time()
            
            line_bot_api.reply_message(
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(text=reply_message)]
                )
            )
            
            reply_end = time.time()
            logger.info(f"Reply sent successfully in {reply_end - reply_start:.2f}s: {reply_message[:50]}...")
        except Exception as e:
            logger.error(f"Failed to send reply: {e}")
    
    logger.info("LINE event handlers registered successfully")


def handle_add_appointment_command(user_message: str, user_id: str, context_type: str, context_id: str) -> str:
    """
    ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
    ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏ö‡∏ö‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô (flexible input)
    """
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        parts = user_message.strip().split()
        
        # ‡∏ñ‡πâ‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏Ñ‡πà "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏î" ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        if len(parts) <= 1:
            return """‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà

‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:

‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°:
‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏î ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ 2025-01-15 09:00 ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏£‡∏≤‡∏ä‡∏ß‡∏¥‡∏ñ‡∏µ

‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢:
‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏î ‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå 15/1/25 ‡πÄ‡∏ä‡πâ‡∏≤

‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô:
‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏î ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≠ ‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ

‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏õ‡∏Å‡πá‡πÑ‡∏î‡πâ! ‡∏ö‡∏≠‡∏ó‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ"""
        
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏£‡∏¥‡∏á
        else:
            # ‡πÉ‡∏ä‡πâ Smart Parser ‡πÅ‡∏¢‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            try:
                from utils.datetime_parser import SmartDateTimeParser
                parser = SmartDateTimeParser()
                
                # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
                parsed_info = parser.extract_appointment_info(user_message)
                
                if parsed_info.get('error'):
                    return f"""‚ùå {parsed_info['error']}

üí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
‚Ä¢ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏î ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û 2025-01-15 09:00
‚Ä¢ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏î ‡∏û‡∏ö‡∏´‡∏°‡∏≠ ‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ ‡πÄ‡∏ä‡πâ‡∏≤
‚Ä¢ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏î ‡∏ô‡∏±‡∏î‡∏ü‡∏±‡∏ô 15/1/25 14:30"""
                
                appointment_datetime = parsed_info['datetime']
                title = parsed_info['title']
                doctor = parsed_info.get('doctor', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')
                hospital = parsed_info['hospital']
                department = parsed_info['department']
                location = parsed_info['location']
                
                logger.info(f"Parsed appointment: {parsed_info}")
                
            except ImportError:
                # Fallback ‡∏ñ‡πâ‡∏≤ parser ‡πÑ‡∏°‡πà‡∏°‡∏µ
                logger.warning("Smart parser not available, using simple parsing")
                appointment_text = " ".join(parts[1:])
                appointment_datetime = datetime.now() + timedelta(days=1)
                title = appointment_text
                doctor = "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
                hospital = "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
                department = "‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"
                location = "‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á"
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î context ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Google Sheets
            if context_type == "group":
                sheets_context = f"group_{context_id}"
                group_id_for_model = context_id
            else:
                sheets_context = "personal"
                group_id_for_model = user_id
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà
            # ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ doctor field ‡πÅ‡∏¢‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡πÉ‡∏ô location
            
            appointment = Appointment(
                id=str(uuid.uuid4())[:8],  # ‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡∏™‡∏±‡πâ‡∏ô ‡πÜ
                group_id=group_id_for_model,
                datetime_iso=appointment_datetime.isoformat(),
                hospital=hospital,
                department=department,
                doctor=doctor if doctor != "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏" else "",
                note=title,
                location=location
            )
            
            logger.info(f"Created appointment: {appointment.to_dict()}")
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Google Sheets
            try:
                logger.info(f"Attempting to save appointment with context: {sheets_context}")
                logger.info(f"Appointment data: {appointment.to_dict()}")
                
                repo = SheetsRepository()
                logger.info(f"SheetsRepository created successfully. Connected: {repo.gc is not None}")
                logger.info(f"Spreadsheet available: {repo.spreadsheet is not None}")
                
                success = repo.add_appointment(appointment)
                logger.info(f"Add appointment result: {success}")
                
                if success:
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà parsed ‡πÑ‡∏î‡πâ
                    date_str = appointment.appointment_datetime.strftime('%d/%m/%Y %H:%M')
                    
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
                    result_message = f"""‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!

üìù ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢: "{title}"
üÜî ‡∏£‡∏´‡∏±‡∏™: {appointment.id}
üìÖ ‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤: {date_str}"""
                    
                    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏≠‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                    if doctor != "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏":
                        result_message += f"\nüë®‚Äç‚öïÔ∏è ‡πÅ‡∏û‡∏ó‡∏¢‡πå: {doctor}"
                    
                    result_message += f"""
üè• ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•: {hospital}
üîñ ‡πÅ‡∏ú‡∏ô‡∏Å: {department}

‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß
üîî ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô 7 ‡∏ß‡∏±‡∏ô ‡πÅ‡∏•‡∏∞ 1 ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢"""
                    
                    return result_message
                else:
                    logger.warning("Failed to save appointment - returned False")
                    return f"""‚ö†Ô∏è ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à

üìù ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: "{title}"
üìÖ ‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤: {date_str}
‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets

üîß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Google Sheets
üí° ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"""
                    
            except Exception as e:
                logger.error(f"Error saving appointment: {e}", exc_info=True)
                return f"""‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å

üìù ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: "{title if 'title' in locals() else user_message}"
üîç ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}

üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Google Sheets
üîß ‡∏î‡∏π logs ‡πÉ‡∏ô Render Dashboard ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""
        
    except Exception as e:
        logger.error(f"Error in handle_add_appointment_command: {e}")
        return "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"


def handle_list_appointments_command(user_id: str, context_type: str, context_id: str) -> str:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢"""
    try:
        repo = SheetsRepository()
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î context ‡πÅ‡∏•‡∏∞ group_id ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Google Sheets
        if context_type == "group":
            sheets_context = f"group_{context_id}"
            group_id_for_query = context_id
        else:
            sheets_context = "personal"
            group_id_for_query = user_id
        
        # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
        appointments = repo.get_appointments(group_id_for_query, sheets_context)
        
        if not appointments:
            return """üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢

‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ

üí° ‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏î" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà"""
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô - ‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏î‡∏µ‡∏ï)
        from datetime import datetime
        import pytz
        
        # ‡πÉ‡∏ä‡πâ Bangkok timezone ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö appointment datetime
        bangkok_tz = pytz.timezone('Asia/Bangkok')
        now = datetime.now(bangkok_tz)
        
        # ‡πÅ‡∏¢‡∏Å‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡πÅ‡∏•‡∏∞‡∏≠‡∏î‡∏µ‡∏ï
        future_appointments = [apt for apt in appointments if apt.appointment_datetime >= now]
        past_appointments = [apt for apt in appointments if apt.appointment_datetime < now]
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï: ‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô (ascending)
        future_appointments.sort(key=lambda apt: apt.appointment_datetime)
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏≠‡∏î‡∏µ‡∏ï: ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô (descending) 
        past_appointments.sort(key=lambda apt: apt.appointment_datetime, reverse=True)
        
        # ‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô: ‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏î‡∏µ‡∏ï
        appointments = future_appointments + past_appointments
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
        appointment_list = "üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n\n"
        
        for i, appointment in enumerate(appointments, 1):
            date_str = appointment.appointment_datetime.strftime("%d/%m/%Y %H:%M")
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° indicator ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï/‡∏≠‡∏î‡∏µ‡∏ï
            if appointment.appointment_datetime >= now:
                status_icon = "üî¥"  # ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏∂‡∏á
            else:
                status_icon = "‚ö™"  # ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß
            
            appointment_list += f"üìÖ {i}. {status_icon} {appointment.note}\n"
            appointment_list += f"     üïê ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {date_str}\n"
            if appointment.hospital and appointment.hospital != "LINE Bot":
                appointment_list += f"     üè• ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•: {appointment.hospital}\n"
            if appointment.department and appointment.department != "General":
                appointment_list += f"     üè¢ ‡πÅ‡∏ú‡∏ô‡∏Å: {appointment.department}\n"
            if getattr(appointment, 'doctor', None) and appointment.doctor:
                appointment_list += f"     üë®‚Äç‚öïÔ∏è ‡πÅ‡∏û‡∏ó‡∏¢‡πå: {appointment.doctor}\n"
            appointment_list += f"     üÜî ‡∏£‡∏´‡∏±‡∏™: {appointment.id}\n\n"
        
        return appointment_list + """üí° ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏•‡∏ö‡∏ô‡∏±‡∏î [‡∏£‡∏´‡∏±‡∏™]' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢

üî¥ = ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏°‡∏≤‡∏ñ‡∏∂‡∏á
‚ö™ = ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß"""
        
    except Exception as e:
        logger.error(f"Error in handle_list_appointments_command: {e}")
        return "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"


def handle_delete_appointment_command(user_message: str, user_id: str, context_type: str, context_id: str) -> str:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢"""
    try:
        from linebot.v3.messaging import MessagingApi, PushMessageRequest, TextMessage, Configuration, ApiClient
        import os
        import re
        
        # ‡πÅ‡∏¢‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        # Pattern: ‡∏•‡∏ö‡∏ô‡∏±‡∏î [appointment_id]
        pattern = r'(?:‡∏•‡∏ö‡∏ô‡∏±‡∏î|‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ô‡∏±‡∏î|‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î)\s+([A-Za-z0-9]+)'
        match = re.search(pattern, user_message, re.IGNORECASE)
        
        if not match:
            return """‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

üìù ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
‡∏•‡∏ö‡∏ô‡∏±‡∏î [‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢]

‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
‡∏•‡∏ö‡∏ô‡∏±‡∏î ABC123
‡∏•‡∏ö‡∏ô‡∏±‡∏î 12345678

üí° ‡∏î‡∏π‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á "‡∏î‡∏π‡∏ô‡∏±‡∏î" """

        appointment_id = match.group(1).strip()
        
        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        try:
            channel_access_token = os.getenv('LINE_CHANNEL_ACCESS_TOKEN')
            if channel_access_token:
                configuration = Configuration(access_token=channel_access_token)
                api_client = ApiClient(configuration)
                line_bot_api = MessagingApi(api_client)
                
                # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î user/group ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                target_id = context_id if context_type == "group" else user_id
                
                # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
                confirmation_message = f"‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ {appointment_id}...\n‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏ô‡∏∞‡∏Ñ‡∏∞"
                line_bot_api.push_message(
                    PushMessageRequest(
                        to=target_id,
                        messages=[TextMessage(text=confirmation_message)]
                    )
                )
                logger.info(f"Sent deletion confirmation for appointment {appointment_id}")
        except Exception as e:
            logger.error(f"Failed to send confirmation message: {e}")
        
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö database
        repo = SheetsRepository()
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î context ‡πÅ‡∏•‡∏∞ group_id ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Google Sheets
        if context_type == "group":
            sheets_context = f"group_{context_id}"
            group_id_for_query = context_id
        else:
            sheets_context = "personal"
            group_id_for_query = user_id
        
        # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
        appointments = repo.get_appointments(group_id_for_query, sheets_context)
        
        # Debug logging
        logger.info(f"Delete attempt - Found {len(appointments)} appointments for group_id: {group_id_for_query}, context: {sheets_context}")
        for apt in appointments:
            logger.info(f"Available appointment ID: {apt.id}")
        
        # ‡∏´‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö
        target_appointment = None
        for apt in appointments:
            if apt.id == appointment_id:
                target_appointment = apt
                break
        
        if not target_appointment:
            final_message = f"""‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏£‡∏´‡∏±‡∏™: {appointment_id}

üí° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á "‡∏î‡∏π‡∏ô‡∏±‡∏î" """
        else:
            # ‡∏•‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
            success = repo.delete_appointment(appointment_id, sheets_context)
            
            if success:
                final_message = f"""‚úÖ ‡∏•‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!

üóëÔ∏è ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö:
‚Ä¢ ‡∏£‡∏´‡∏±‡∏™: {appointment_id}
‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠: {target_appointment.title}
‚Ä¢ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {target_appointment.date}
‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤: {target_appointment.time}
‚Ä¢ ‡∏´‡∏°‡∏≠: {target_appointment.doctor}"""
            else:
                final_message = f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏£‡∏´‡∏±‡∏™ {appointment_id} ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
        
        # ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ú‡πà‡∏≤‡∏ô push message
        try:
            if 'line_bot_api' in locals():
                line_bot_api.push_message(
                    PushMessageRequest(
                        to=target_id,
                        messages=[TextMessage(text=final_message)]
                    )
                )
                logger.info(f"Sent final deletion result for appointment {appointment_id}")
                return "üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢..."  # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ timeout
            else:
                return final_message
        except Exception as e:
            logger.error(f"Failed to send final message: {e}")
            return final_message
        
    except Exception as e:
        logger.error(f"Error in handle_delete_appointment_command: {e}")
        return "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"


def handle_edit_appointment_command(user_message: str, user_id: str, context_type: str, context_id: str) -> str:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢"""
    try:
        import re
        from datetime import datetime
        from utils.datetime_parser import SmartDateTimeParser
        
        logger.info(f"[EDIT] Processing edit command: {user_message}")
        logger.info(f"[EDIT] User: {user_id}, Context: {context_type}, Context ID: {context_id}")
        
        # ‡πÅ‡∏¢‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        # Pattern: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ô‡∏±‡∏î [appointment_id] [fields...]
        pattern = r'(?:‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ô‡∏±‡∏î|‡πÅ‡∏Å‡πâ‡∏ô‡∏±‡∏î|‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î)\s+([A-Za-z0-9]+)\s*(.*)'
        match = re.search(pattern, user_message, re.IGNORECASE | re.DOTALL)
        
        logger.info(f"[EDIT] Regex match result: {match.groups() if match else 'No match'}")
        
        if not match:
            return """‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

üìù ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ô‡∏±‡∏î [‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢] [‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç]

‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ô‡∏±‡∏î ABC123 ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢:"‡∏ï‡∏£‡∏ß‡∏à‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢"

‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ô‡∏±‡∏î ABC123 
‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢:"‡∏ï‡∏£‡∏ß‡∏à‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢"
‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤:"8 ‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏° 2025 14:00"

üìù ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ:
‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢:"..."
‚Ä¢ ‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤:"..."  
‚Ä¢ ‡πÅ‡∏û‡∏ó‡∏¢‡πå:"..."
‚Ä¢ ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•:"..."
‚Ä¢ ‡πÅ‡∏ú‡∏ô‡∏Å:"..."

üí° ‡∏î‡∏π‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á "‡∏î‡∏π‡∏ô‡∏±‡∏î" """

        appointment_id = match.group(1).strip()
        update_fields_text = match.group(2).strip()
        
        if not update_fields_text:
            return f"""‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç

üìù ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ô‡∏±‡∏î {appointment_id} ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢:"‡∏ï‡∏£‡∏ß‡∏à‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢" """

        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö database
        repo = SheetsRepository()
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î context ‡πÅ‡∏•‡∏∞ group_id ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Google Sheets
        if context_type == "group":
            sheets_context = f"group_{context_id}"
            group_id_for_query = context_id
        else:
            sheets_context = "personal"
            group_id_for_query = user_id
            
        logger.info(f"[EDIT] Using context: {sheets_context}, group_id: {group_id_for_query}")
        
        # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
        appointments = repo.get_appointments(group_id_for_query, sheets_context)
        
        # Debug logging
        logger.info(f"[EDIT] Found {len(appointments)} appointments for group_id: {group_id_for_query}, context: {sheets_context}")
        for apt in appointments:
            logger.info(f"Available appointment ID: {apt.id}")
        
        # ‡∏´‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        target_appointment = None
        for apt in appointments:
            if apt.id == appointment_id:
                target_appointment = apt
                break
        
        if not target_appointment:
            return f"""‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏£‡∏´‡∏±‡∏™: {appointment_id}

üí° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á "‡∏î‡∏π‡∏ô‡∏±‡∏î" """

        # ‡πÅ‡∏¢‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        updated_fields = {}
        datetime_parser = SmartDateTimeParser()
        
        # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ï‡πà‡∏≤‡∏á ‡πÜ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ö‡∏ö‡∏°‡∏µ quotes ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ)
        field_patterns = {
            'title': r'‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢:\s*["\']([^"\']+)["\']',
            'datetime': r'‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤:\s*["\']([^"\']+)["\']',
            'doctor': r'‡πÅ‡∏û‡∏ó‡∏¢‡πå:\s*["\']([^"\']+)["\']',
            'hospital': r'‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•:\s*["\']([^"\']+)["\']',
            'department': r'‡πÅ‡∏ú‡∏ô‡∏Å:\s*["\']([^"\']+)["\']'
        }
        
        changes_made = []
        
        for field_name, pattern in field_patterns.items():
            match_field = re.search(pattern, update_fields_text, re.IGNORECASE)
            if match_field:
                new_value = match_field.group(1).strip()
                
                if field_name == 'title':
                    updated_fields['note'] = new_value
                    changes_made.append(f"‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢: {getattr(target_appointment, 'note', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')} ‚Üí {new_value}")
                    
                elif field_name == 'datetime':
                    # ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà
                    logger.info(f"[EDIT] Parsing datetime: '{new_value}'")
                    new_dt = datetime_parser._parse_datetime_string(new_value)
                    logger.info(f"[EDIT] Parsed result: {new_dt}")
                    if new_dt:
                        updated_fields['datetime_iso'] = new_dt.isoformat()
                        old_dt = datetime.fromisoformat(target_appointment.datetime_iso.replace('Z', ''))
                        logger.info(f"[EDIT] Old datetime: {old_dt}, New datetime: {new_dt}")
                        changes_made.append(f"‚Ä¢ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {old_dt.strftime('%d/%m/%Y %H:%M')} ‚Üí {new_dt.strftime('%d/%m/%Y %H:%M')}")
                    else:
                        return f"""‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: "{new_value}"

üìù ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö:
‚Ä¢ "8 ‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏° 2025 14:00"
‚Ä¢ "15/11/2025 09:30"
‚Ä¢ "2025-12-25 10:15" """
                        
                elif field_name == 'doctor':
                    updated_fields['doctor'] = new_value
                    changes_made.append(f"‚Ä¢ ‡πÅ‡∏û‡∏ó‡∏¢‡πå: {getattr(target_appointment, 'doctor', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')} ‚Üí {new_value}")
                    
                elif field_name == 'hospital':
                    updated_fields['hospital'] = new_value
                    changes_made.append(f"‚Ä¢ ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•: {getattr(target_appointment, 'hospital', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')} ‚Üí {new_value}")
                    
                elif field_name == 'department':
                    updated_fields['department'] = new_value
                    changes_made.append(f"‚Ä¢ ‡πÅ‡∏ú‡∏ô‡∏Å: {getattr(target_appointment, 'department', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')} ‚Üí {new_value}")

        if not updated_fields:
            return """‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç

üìù ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:
‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢:"‡∏ï‡∏£‡∏ß‡∏à‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢"
‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤:"8 ‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏° 2025 14:00"
‡πÅ‡∏û‡∏ó‡∏¢‡πå:"‡∏î‡∏£.‡∏™‡∏°‡∏ä‡∏≤‡∏¢"
‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•:"‡∏®‡∏¥‡∏£‡∏¥‡∏£‡∏≤‡∏ä"
‡πÅ‡∏ú‡∏ô‡∏Å:"‡∏≠‡∏≤‡∏¢‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°" """

        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
        success = repo.update_appointment(appointment_id, sheets_context, updated_fields)
        
        if success:
            changes_text = '\n'.join(changes_made)
            return f"""‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!

üîÑ ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á:
{changes_text}

üìã ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢: {appointment_id}"""
        else:
            return f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏£‡∏´‡∏±‡∏™ {appointment_id} ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
        
    except Exception as e:
        logger.error(f"Error in handle_edit_appointment_command: {e}")
        return "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"


def handle_reminder_info_command(context_type: str) -> str:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"""
    base_info = """üîî ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥

‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 09:00 ‡∏ô.
‚è∞ ‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤:

üìÖ 7 ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢:
   ‚Ä¢ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°
   ‚Ä¢ ‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤

‚ö° 1 ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢:
   ‚Ä¢ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
   ‚Ä¢ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
   ‚Ä¢ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏ó‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤

üí° ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö"""
    
    if context_type == "group":
        return base_info + '\n\nüè• ‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°: ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏∞‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°'
    else:
        return base_info + '\n\nüë§ ‡πÇ‡∏´‡∏°‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß: ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'


def handle_test_notification_command(user_id: str) -> str:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"""
    try:
        # ‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ notification service (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        from notifications.notification_service import NotificationService
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á test message
        return """üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô

‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!

üìã ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:
‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô 09:00 ‡∏ô.
‚Ä¢ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤: 7 ‡∏ß‡∏±‡∏ô, 1 ‡∏ß‡∏±‡∏ô
‚Ä¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‚úÖ

üí° ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
   ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
        
    except ImportError:
        return """‚ö†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°

üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
‚è≥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà

üí° ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö"""
        
    except Exception as e:
        logger.error(f"Error in test notification: {e}")
        return f"""‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö

üîç ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {str(e)}
üîß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö"""


def handle_test_date_parser_command() -> str:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö Date Parser"""
    try:
        from utils.datetime_parser import SmartDateTimeParser
        from datetime import datetime
        
        parser = SmartDateTimeParser()
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡πà‡∏≤‡∏á ‡πÜ
        test_cases = [
            "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û 2025-01-15 09:00",
            "‡∏û‡∏ö‡∏´‡∏°‡∏≠ 15/1/25 ‡πÄ‡∏ä‡πâ‡∏≤", 
            "‡∏ô‡∏±‡∏î‡∏ü‡∏±‡∏ô ‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ 14:30",
            "‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏•‡∏∑‡∏≠‡∏î ‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤ ‡∏ö‡πà‡∏≤‡∏¢"
        ]
        
        result = "üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏¢‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà\\n\\n"
        
        for i, case in enumerate(test_cases, 1):
            parsed = parser.extract_appointment_info(f"‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏î {case}")
            if parsed['datetime']:
                date_str = parsed['datetime'].strftime('%d/%m/%Y %H:%M')
                result += f"{i}. {case}\\n"
                result += f"   ‚û°Ô∏è {date_str} | {parsed['title']}\\n\\n"
            else:
                result += f"{i}. {case} ‚ùå\\n\\n"
        
        result += """‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö Smart Parser ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!

üí° ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö:
‚Ä¢ 2025-01-15 09:00
‚Ä¢ 15/1/25 ‡πÄ‡∏ä‡πâ‡∏≤  
‚Ä¢ ‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ 14:30
‚Ä¢ ‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤ ‡∏ö‡πà‡∏≤‡∏¢"""
        
        return result
        
    except ImportError:
        return """‚ö†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö Smart Parser ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°

üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö
üìÖ ‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ 09:00)

üí° ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏£‡πá‡∏ß ‡πÜ ‡∏ô‡∏µ‡πâ"""
        
    except Exception as e:
        logger.error(f"Error in test date parser: {e}")
        return f"""‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö

üîç ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {str(e)}
üîß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö"""


def handle_force_notification_check_command() -> str:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á force check ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"""
    try:
        import requests
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö force check
        base_url = "https://line-group-reminder-bot.onrender.com"
        
        # ‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å notification check
        try:
            response = requests.get(f"{base_url}/run-notification-check", timeout=10)
            
            if response.status_code == 200:
                return """‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!

üîç ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß
üì® ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏∞‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ

‚è∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥‡∏à‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô 09:00 ‡∏ô.
üí° ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"""
            else:
                return f"""‚ö†Ô∏è ‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à

üîç Response Code: {response.status_code}
üîß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á

üí° ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô" ‡πÅ‡∏ó‡∏ô"""
                
        except requests.exceptions.RequestException as e:
            return f"""‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ

üîç ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {str(e)}
üîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï

üí° ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô" ‡πÅ‡∏ó‡∏ô"""
    
    except ImportError:
        return """‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ

üîß ‡∏Ç‡∏≤‡∏î‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
üí° ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô" ‡πÅ‡∏ó‡∏ô

üìã ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏õ‡∏ó‡∏µ‡πà:
https://line-group-reminder-bot.onrender.com/run-notification-check"""
    
    except Exception as e:
        logger.error(f"Error in force notification check: {e}")
        return f"""‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î

üîç ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {str(e)}
üí° ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö"""