#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test Delete and Edit Appointment Functions
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
"""

import sys
import os

# Add the project root directory to sys.path
project_root = os.path.dirname(os.path.abspath(__file__))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

from handlers import handle_delete_appointment_command, handle_edit_appointment_command

def test_delete_appointment():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢"""
    
    print("üîç Testing Delete Appointment Function...")
    print("=" * 50)
    
    test_cases = [
        {
            "message": "‡∏•‡∏ö‡∏ô‡∏±‡∏î ABC123",
            "description": "Standard delete format",
            "should_parse": True
        },
        {
            "message": "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ô‡∏±‡∏î XYZ789",
            "description": "Alternative delete format",
            "should_parse": True
        },
        {
            "message": "‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î DEF456",
            "description": "Full phrase delete format",
            "should_parse": True
        },
        {
            "message": "‡∏•‡∏ö‡∏ô‡∏±‡∏î",
            "description": "Missing appointment ID",
            "should_parse": False
        },
        {
            "message": "‡∏•‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ ABC123",
            "description": "Wrong command format",
            "should_parse": False
        }
    ]
    
    all_passed = True
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüìù Test {i}: {test_case['description']}")
        print(f"Input: {repr(test_case['message'])}")
        
        try:
            # Mock parameters
            user_id = "test_user"
            context_type = "personal"
            context_id = "test_context"
            
            result = handle_delete_appointment_command(
                test_case['message'], user_id, context_type, context_id
            )
            
            print(f"Result: {result[:100]}...")
            
            # Check if parsing worked as expected
            if test_case['should_parse']:
                # Should contain appointment ID in result if parsing worked
                if "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏£‡∏´‡∏±‡∏™" in result or "‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" in result:
                    if "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏£‡∏´‡∏±‡∏™" in result:
                        print("‚úÖ Parsing successful (ID not found in DB - expected)")
                    else:
                        print("‚ùå Parsing failed when it should succeed")
                        all_passed = False
                else:
                    print("‚úÖ Parsing successful")
            else:
                # Should show error message
                if "‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" in result:
                    print("‚úÖ Correctly rejected invalid format")
                else:
                    print("‚ùå Should have rejected invalid format")
                    all_passed = False
                    
        except Exception as e:
            print(f"‚ùå Exception occurred: {str(e)}")
            all_passed = False
    
    return all_passed


def test_edit_appointment():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢"""
    
    print("\n\nüîç Testing Edit Appointment Function...")
    print("=" * 50)
    
    test_cases = [
        {
            "message": '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ô‡∏±‡∏î ABC123 ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢:"‡∏ï‡∏£‡∏ß‡∏à‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢"',
            "description": "Single field edit - title",
            "should_parse": True
        },
        {
            "message": '''‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ô‡∏±‡∏î XYZ789
‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢:"‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏ü‡∏±‡∏ô"
‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤:"8 ‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏° 2025 14:00"''',
            "description": "Multi-field edit - title and datetime",
            "should_parse": True
        },
        {
            "message": '‡πÅ‡∏Å‡πâ‡∏ô‡∏±‡∏î DEF456 ‡πÅ‡∏û‡∏ó‡∏¢‡πå:"‡∏î‡∏£.‡∏™‡∏°‡∏ä‡∏≤‡∏¢" ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•:"‡∏®‡∏¥‡∏£‡∏¥‡∏£‡∏≤‡∏ä"',
            "description": "Multi-field edit - doctor and hospital",
            "should_parse": True
        },
        {
            "message": "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ô‡∏±‡∏î ABC123",
            "description": "Missing update fields",
            "should_parse": False
        },
        {
            "message": "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ô‡∏±‡∏î",
            "description": "Missing appointment ID and fields",
            "should_parse": False
        },
        {
            "message": '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ô‡∏±‡∏î ABC123 ‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤:"invalid date format"',
            "description": "Invalid datetime format",
            "should_parse": False
        }
    ]
    
    all_passed = True
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüìù Test {i}: {test_case['description']}")
        print(f"Input: {repr(test_case['message'])}")
        
        try:
            # Mock parameters
            user_id = "test_user"
            context_type = "personal"
            context_id = "test_context"
            
            result = handle_edit_appointment_command(
                test_case['message'], user_id, context_type, context_id
            )
            
            print(f"Result: {result[:100]}...")
            
            # Check if parsing worked as expected
            if test_case['should_parse']:
                if "‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" in result or "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" in result:
                    if "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏£‡∏´‡∏±‡∏™" in result:
                        print("‚úÖ Parsing successful (ID not found in DB - expected)")
                    else:
                        print("‚ùå Parsing failed when it should succeed")
                        all_passed = False
                else:
                    print("‚úÖ Parsing successful")
            else:
                # Should show error message
                if "‚ùå" in result:
                    print("‚úÖ Correctly rejected invalid format")
                else:
                    print("‚ùå Should have rejected invalid format")
                    all_passed = False
                    
        except Exception as e:
            print(f"‚ùå Exception occurred: {str(e)}")
            all_passed = False
    
    return all_passed


def main():
    """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    
    print("üè• Testing Enhanced Delete and Edit Functions")
    print("=" * 60)
    
    # Test delete function
    delete_passed = test_delete_appointment()
    
    # Test edit function  
    edit_passed = test_edit_appointment()
    
    # Summary
    print("\n" + "=" * 60)
    print("üìä Test Results Summary:")
    
    if delete_passed:
        print("‚úÖ Delete Appointment Function: ALL TESTS PASSED")
    else:
        print("‚ùå Delete Appointment Function: SOME TESTS FAILED")
        
    if edit_passed:
        print("‚úÖ Edit Appointment Function: ALL TESTS PASSED")
    else:
        print("‚ùå Edit Appointment Function: SOME TESTS FAILED")
    
    overall_success = delete_passed and edit_passed
    
    if overall_success:
        print("\nüéâ ALL TESTS PASSED! Functions are ready for use.")
    else:
        print("\n‚ùå SOME TESTS FAILED! Please review and fix issues.")
    
    return overall_success


if __name__ == "__main__":
    main()