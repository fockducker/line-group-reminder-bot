#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
‡∏™‡∏£‡∏∏‡∏õ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á LINE Group Reminder Bot
‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
"""

import sys
import os
import traceback
from datetime import datetime

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_feature(feature_name, test_function):
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•"""
    print(f"\nüîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {feature_name}")
    try:
        result = test_function()
        if result:
            print(f"‚úÖ {feature_name}: ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
            return True
        else:
            print(f"‚ùå {feature_name}: ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
            return False
    except Exception as e:
        print(f"‚ùå {feature_name}: Error - {str(e)}")
        return False

def test_smart_parser():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Smart Parser"""
    try:
        from utils.datetime_parser import SmartDateTimeParser
        parser = SmartDateTimeParser()
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Structured Format
        structured = '''‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢: "‡∏ó‡∏î‡∏™‡∏≠‡∏ö"
‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤: "1 ‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏° 2025 14:00"
‡πÅ‡∏û‡∏ó‡∏¢‡πå: "‡∏î‡∏£.‡∏ó‡∏î‡∏™‡∏≠‡∏ö"
‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•: "‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö"
‡πÅ‡∏ú‡∏ô‡∏Å: "‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏î‡∏™‡∏≠‡∏ö"'''
        
        result1 = parser.extract_appointment_info("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏î " + structured)
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Natural Language
        natural = "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏° 2025 ‡πÄ‡∏ß‡∏•‡∏≤ 14:00 ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡πÅ‡∏ú‡∏ô‡∏Å ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ô‡∏±‡∏î ‡∏û‡∏ö ‡∏î‡∏£.‡∏ó‡∏î‡∏™‡∏≠‡∏ö"
        result2 = parser.extract_appointment_info("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏î " + natural)
        
        return (result1 and result1['datetime'] and 
                result2 and result2['datetime'])
    except:
        return False

def test_google_sheets():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Google Sheets Connection"""
    try:
        from storage.sheets_repo import SheetsRepository
        repo = SheetsRepository()
        return repo.gc is not None
    except:
        return False

def test_notification_service():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Notification Service"""
    try:
        from notifications.notification_service import NotificationService
        # ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ LINE API
        # ‡πÅ‡∏ï‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤ import ‡πÑ‡∏î‡πâ
        return True
    except:
        return False

def test_handlers():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Message Handlers"""
    try:
        from handlers import (
            handle_add_appointment_command,
            handle_list_appointments_command,
            handle_delete_appointment_command,
            handle_edit_appointment_command,
            handle_reminder_info_command,
            handle_test_notification_command
        )
        return True
    except:
        return False

def test_flask_app():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Flask App Structure"""
    try:
        from app import app
        routes = []
        for rule in app.url_map.iter_rules():
            routes.append(str(rule))
        return len(routes) > 0
    except:
        return False

def test_data_models():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Data Models"""
    try:
        from storage.models import Appointment
        from datetime import datetime
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á appointment ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        appointment = Appointment(
            id="test123",
            group_id="test_group",
            datetime_iso="2025-10-01T14:00:00+07:00",
            hospital="‡∏ó‡∏î‡∏™‡∏≠‡∏ö",
            department="‡∏ó‡∏î‡∏™‡∏≠‡∏ö",
            note="‡∏ó‡∏î‡∏™‡∏≠‡∏ö",
            location="‡∏ó‡∏î‡∏™‡∏≠‡∏ö"
        )
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö appointment_datetime property
        return appointment.appointment_datetime is not None
    except:
        return False

def main():
    """Main function - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå"""
    print("üè• LINE Group Reminder Bot - ‡∏™‡∏£‡∏∏‡∏õ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
    print("=" * 60)
    
    features = [
        ("üìä Data Models", test_data_models),
        ("ü§ñ Smart Parser (Structured Format)", test_smart_parser),
        ("üìã Google Sheets Integration", test_google_sheets),
        ("üîî Notification Service", test_notification_service), 
        ("‚öôÔ∏è Message Handlers", test_handlers),
        ("üåê Flask Web App", test_flask_app),
    ]
    
    working_features = 0
    total_features = len(features)
    
    for feature_name, test_func in features:
        if test_feature(feature_name, test_func):
            working_features += 1
    
    print("\n" + "=" * 60)
    print(f"üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•: {working_features}/{total_features} ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
    
    print(f"\n‚úÖ ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô:")
    print("   ‚Ä¢ Smart Parser - ‡πÅ‡∏¢‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ (2 ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö)")
    print("   ‚Ä¢ Message Handlers - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á ‡πÜ")
    print("   ‚Ä¢ Data Models - ‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢")
    print("   ‚Ä¢ Flask Web App - ‡∏£‡∏±‡∏ö Webhook ‡∏à‡∏≤‡∏Å LINE")
    
    if not test_google_sheets():
        print(f"\n‚ö†Ô∏è ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Environment Variables:")
        print("   ‚Ä¢ Google Sheets Integration - ‡∏ï‡πâ‡∏≠‡∏á GOOGLE_CREDENTIALS_JSON")
        print("   ‚Ä¢ Notification Service - ‡∏ï‡πâ‡∏≠‡∏á LINE Bot API Token")
        
    print(f"\nüéØ ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:")
    print("   1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏î (2 ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: Structured + Natural)")
    print("   2. ‡∏î‡∏π‡∏ô‡∏±‡∏î (‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢)")
    print("   3. ‡∏•‡∏ö‡∏ô‡∏±‡∏î (‡∏•‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢)")
    print("   4. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ô‡∏±‡∏î (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢)")
    print("   5. ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (7 ‡∏ß‡∏±‡∏ô + 1 ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏±‡∏î)")
    print("   6. ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Group Chat + Personal Chat")
    
    print(f"\nüìù ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:")
    print("   ‚Ä¢ '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á' - ‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    print("   ‚Ä¢ '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏î' - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢")
    print("   ‚Ä¢ '‡∏î‡∏π‡∏ô‡∏±‡∏î' - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢")
    print("   ‚Ä¢ '‡∏•‡∏ö‡∏ô‡∏±‡∏î [‡∏£‡∏´‡∏±‡∏™]' - ‡∏•‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢")
    print("   ‚Ä¢ '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ô‡∏±‡∏î [‡∏£‡∏´‡∏±‡∏™]' - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢")
    print("   ‚Ä¢ '‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô' - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô")
    print("   ‚Ä¢ 'status' - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö")

if __name__ == "__main__":
    main()