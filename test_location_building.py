#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Test location vs building_dept extraction
"""

import sys
import os

# Add the parent directory to Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from utils.enhanced_smart_parser import EnhancedSmartDateTimeParser

def test_location_building_separation():
    parser = EnhancedSmartDateTimeParser()
    
    test_cases = [
        {
            'text': '‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ 2‡πÇ‡∏°‡∏á ‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡πÅ‡∏ü',
            'expected_location': '‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡πÅ‡∏ü',
            'expected_building': '',
            'description': 'General location with ‡∏ó‡∏µ‡πà'
        },
        {
            'text': '‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£A ‡∏ä‡∏±‡πâ‡∏ô3 ‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ',
            'expected_location': '',
            'expected_building': '‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£A',  # Should pick first building pattern
            'description': 'Building-specific location'
        },
        {
            'text': '‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ú‡∏ô‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô 10‡πÇ‡∏°‡∏á‡πÄ‡∏ä‡πâ‡∏≤',
            'expected_location': '',
            'expected_building': '‡∏ó‡∏µ‡πà‡πÅ‡∏ú‡∏ô‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô',
            'description': 'Department-specific location'
        },
        {
            'text': '‡∏Å‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏∂‡∏ÅB ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠',
            'expected_location': '‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠',  # General location should win
            'expected_building': '‡∏ó‡∏µ‡πà‡∏ï‡∏∂‡∏ÅB',
            'description': 'Mixed: both building and general location'
        },
        {
            'text': '‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡πâ‡∏≤‡∏á‡πÄ‡∏ã‡πá‡∏ô‡∏ó‡∏£‡∏±‡∏• ‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ 6‡πÇ‡∏°‡∏á‡πÄ‡∏¢‡πá‡∏ô',
            'expected_location': '‡πÄ‡∏ã‡πá‡∏ô‡∏ó‡∏£‡∏±‡∏•',  # Mall should be location
            'expected_building': '',
            'description': 'Mall location'
        },
        {
            'text': '‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°A ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£1 ‡∏ä‡∏±‡πâ‡∏ô2',
            'expected_location': '',
            'expected_building': '‡∏ó‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°A',  # Most specific building info
            'description': 'Multiple building references'
        },
        {
            'text': '‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏µ‡∏¨‡∏≤',
            'expected_location': '‡∏ó‡∏µ‡πà‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏µ‡∏¨‡∏≤',
            'expected_building': '',
            'description': 'Sports venue location'
        }
    ]
    
    print("üß™ Testing Location vs Building/Department Extraction")
    print("=" * 70)
    
    all_passed = True
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nTest {i}: {test_case['description']}")
        print(f"Input: {test_case['text']}")
        print("-" * 50)
        
        result = parser.extract_appointment_info(test_case['text'])
        
        actual_location = result.get('location', '')
        actual_building = result.get('building_dept', '')
        
        location_passed = actual_location == test_case['expected_location']
        building_passed = actual_building == test_case['expected_building']
        
        print(f"  Location: expected '{test_case['expected_location']}', got '{actual_location}' {'‚úÖ' if location_passed else '‚ùå'}")
        print(f"  Building: expected '{test_case['expected_building']}', got '{actual_building}' {'‚úÖ' if building_passed else '‚ùå'}")
        
        test_passed = location_passed and building_passed
        print(f"  Result: {'‚úÖ PASS' if test_passed else '‚ùå FAIL'}")
        
        if not test_passed:
            all_passed = False
    
    print("\n" + "=" * 70)
    print(f"üéØ Overall: {'‚úÖ ALL TESTS PASSED' if all_passed else '‚ùå SOME TESTS FAILED'}")

if __name__ == "__main__":
    test_location_building_separation()
    input("\nPress Enter to exit...")